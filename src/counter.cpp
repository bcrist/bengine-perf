#include "pch.hpp"
#include "counter.hpp"
#include "service_stats.hpp"

namespace be::perf {

///////////////////////////////////////////////////////////////////////////////
Counter::Counter()
   : stat_(nullptr)
{ }

///////////////////////////////////////////////////////////////////////////////
Counter::Counter(Id id)
   : stat_(&(perf_stats().counters[id]))
{ }

///////////////////////////////////////////////////////////////////////////////
Counter::Counter(CounterStat& stat)
   : stat_(&stat)
{ }

///////////////////////////////////////////////////////////////////////////////
Counter::Counter(const Counter& other)
   : stat_(other.stat_)
{ }

///////////////////////////////////////////////////////////////////////////////
Counter::Counter(Counter&& other)
   : stat_(other.stat_)
{ }

///////////////////////////////////////////////////////////////////////////////
Counter& Counter::operator=(Counter other) {
   swap_(other);
   return *this;
}

///////////////////////////////////////////////////////////////////////////////
Counter::operator bool() const {
   return stat_ != nullptr;
}

///////////////////////////////////////////////////////////////////////////////
CounterStat* Counter::stat() const {
   return stat_;
}

///////////////////////////////////////////////////////////////////////////////
void Counter::count(I64 delta) {
   if (stat_) {
      stat_->report(delta);
   }
}

///////////////////////////////////////////////////////////////////////////////
void Counter::swap_(Counter& other) {
   using std::swap;
   swap(stat_, other.stat_);
}

} // be::perf
